{"version":3,"sources":["components/AppBar.js","components/SearchBox.js","utils/API.js","components/DataBody.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","classes","className","AppBar","position","Toolbar","Typography","variant","Button","color","margin","width","BasicTextFields","noValidate","autoComplete","TextField","id","label","getProducts","axios","get","saveToCart","postData","post","card","maxWidth","media","height","MediaCard","props","Card","CardMedia","image","name","CardContent","gutterBottom","component","price","CardActions","onClick","console","log","API","product_name","then","result","catch","err","size","App","state","products","this","map","product","key","salePrice","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"y8mBAOMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OAIC,SAASK,IACtB,IAAMC,EAAUV,IAEhB,OACE,yBAAKW,UAAWD,EAAQP,MACtB,kBAACS,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWD,EAAQF,OAA5C,sBAGA,kBAACS,EAAA,EAAD,CAAQC,MAAM,WAAd,W,aCzBJlB,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJ,QAAS,CACPgB,OAAQjB,EAAMK,QAAQ,GACtBa,MAAO,UAKE,SAASC,IACtB,IAAMX,EAAUV,IAEhB,OACE,0BAAMW,UAAWD,EAAQP,KAAMmB,YAAU,EAACC,aAAa,OACrD,kBAACC,EAAA,EAAD,CAAWC,GAAG,iBAAiBC,MAAM,Y,yDChB5B,GAEbC,YAAa,WACX,OAAOC,IAAMC,IAAI,kBAGnBC,WAAY,SAASC,GACnB,OAAOH,IAAMI,KAAK,gBAAiBD,KCCjC/B,EAAYC,YAAW,CAC3BgC,KAAM,CACJC,SAAU,KAEZC,MAAO,CACLC,OAAQ,OAIG,SAASC,EAAUC,GAChC,IAAM5B,EAAUV,IAiBd,OACI,kBAACuC,EAAA,EAAD,CAAM5B,UAAWD,EAAQuB,MACrB,kBAACO,EAAA,EAAD,CACE7B,UAAWD,EAAQyB,MACnBM,MAAOH,EAAMG,MACbjC,MAAO8B,EAAMI,OAEf,kBAACC,EAAA,EAAD,KACE,kBAAC5B,EAAA,EAAD,CAAY6B,cAAY,EAAC5B,QAAQ,KAAK6B,UAAU,MAC/CP,EAAMI,MAEP,kBAAC3B,EAAA,EAAD,CAAYC,QAAQ,QAAQE,MAAM,gBAAgB2B,UAAU,KACzDP,EAAMQ,QAGb,kBAACC,EAAA,EAAD,CACEC,QA/BQ,WAChBC,QAAQC,IAAI,iBACZD,QAAQC,IAAIZ,GACZa,EAAIrB,WAAW,CACXsB,aAAcd,EAAMI,KACpBD,MAAOH,EAAMG,MACbK,MAAOR,EAAMQ,QACdO,MAAK,SAAAC,GACJL,QAAQC,IAAII,MACbC,OAAM,SAAAC,GACLP,QAAQC,IAAIM,QAuBR,kBAACvC,EAAA,EAAD,CAAQwC,KAAK,QAAQvC,MAAM,WAA3B,iB,YCtBGwC,E,2MAxBbC,MAAQ,CACNC,Y,wEAIF,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACCC,KAAKF,MAAMC,SAASE,KAAI,SAAAC,GAAO,OAC9B,kBAAC,EAAD,CACEC,IAAKD,EAAQrB,KACbA,KAAMqB,EAAQrB,KACdD,MAAQsB,EAAQtB,MAChBK,MAAQiB,EAAQE,oB,GAhBRC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.14845bc7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Online Marketplace\r\n          </Typography>\r\n          <Button color=\"inherit\">Cart</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: 200,\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function BasicTextFields() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <form className={classes.root} noValidate autoComplete=\"off\">\r\n      <TextField id=\"standard-basic\" label=\"Search\" />\r\n    </form>\r\n  );\r\n}","import axios from \"axios\";\r\n\r\nexport default {\r\n  // Gets all posts\r\n  getProducts: function() {\r\n    return axios.get(\"/api/products\");\r\n  },\r\n  // Saves an item to the database\r\n  saveToCart: function(postData) {\r\n    return axios.post(\"/api/products\", postData);\r\n  }\r\n};","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport API from \"../utils/API\"\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    maxWidth: 345,\r\n  },\r\n  media: {\r\n    height: 140,\r\n  },\r\n});\r\n\r\nexport default function MediaCard(props) {\r\n  const classes = useStyles();\r\n\r\n  const addToCart = () => {\r\n    console.log(\"I was clicked\");\r\n    console.log(props);\r\n    API.saveToCart({\r\n        product_name: props.name,\r\n        image: props.image,\r\n        price: props.price\r\n    }).then(result => {\r\n        console.log(result);\r\n    }).catch(err => {\r\n        console.log(err);\r\n    })\r\n\r\n  }\r\n\r\n    return (\r\n        <Card className={classes.card}>\r\n            <CardMedia\r\n              className={classes.media}\r\n              image={props.image}\r\n              title={props.name}\r\n            />\r\n            <CardContent>\r\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n              {props.name}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                {props.price}\r\n              </Typography>\r\n            </CardContent>\r\n          <CardActions\r\n            onClick={addToCart}\r\n          >\r\n            <Button size=\"small\" color=\"primary\">\r\n              Add to Cart\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n      );\r\n  \r\n \r\n}","import React, { Fragment, Component } from 'react';\nimport './App.css';\nimport AppBar from \"./components/AppBar\"\nimport SearchBox from \"./components/SearchBox\"\nimport DataBody from \"./components/DataBody\"\nimport products from \"./products/products.json\"\n\nclass App extends Component {\n\n  state = {\n    products\n  }\n   \nrender(){\n  return (\n    <Fragment>\n      <AppBar/>\n      <SearchBox/>\n      {this.state.products.map(product => (\n        <DataBody\n          key={product.name} \n          name={product.name}\n          image= {product.image}\n          price= {product.salePrice}\n        />\n      ))}\n      \n    </Fragment>\n  );\n}\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}